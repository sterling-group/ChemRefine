============================= test session starts ==============================
platform linux -- Python 3.11.11, pytest-8.3.5, pluggy-1.6.0
rootdir: /mfs/io/groups/sterling/mfshome/dal950773/GitHub/ChemRefine
configfile: pyproject.toml
collected 6 items

tests/test_init.py .                                                     [ 16%]
tests/test_interface.py F                                                [ 33%]
tests/test_refine.py F                                                   [ 50%]
tests/test_submitter.py ..                                               [ 83%]
tests/test_utils.py F                                                    [100%]

=================================== FAILURES ===================================
_________________________ test_parse_output_real_data __________________________

tmp_path = PosixPath('/tmp/pytest-of-dal950773/pytest-3/test_parse_output_real_data0')

    def test_parse_output_real_data(tmp_path):
        """
        Test OrcaInterface.parse_output() parses a real ORCA output file.
        """
        # Copy the example ORCA output to a temporary test directory
        src_file = Path(__file__).parent / "data" / "orca.out"
        test_file = tmp_path / "orca.out"
        test_file.write_text(src_file.read_text())
    
        # Initialize OrcaInterface
        orca = OrcaInterface()
    
        # Parse the output
        coordinates, energies = orca.parse_output([test_file], calculation_type="DFT")
    
        # Perform assertions
        assert isinstance(coordinates, list)
        assert isinstance(energies, list)
>       assert len(energies) > 0
E       assert 0 > 0
E        +  where 0 = len([])

tests/test_interface.py:23: AssertionError
____________________________ test_filter_structures ____________________________

    def test_filter_structures():
        """
        Test StructureRefiner.filter() reduces structures based on dummy energy thresholds.
        """
        refiner = StructureRefiner()
        coordinates = np.random.rand(10, 3)
        energies = np.linspace(-100, -90, 10)
        ids = list(range(10))
>       filtered_coords, filtered_ids = refiner.filter(coordinates, energies, ids, 'random', {'fraction': 0.5})

tests/test_refine.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chemrefine.refine.StructureRefiner object at 0x7f4b542f2910>
coordinates = array([[5.67333944e-04, 6.66764283e-01, 7.97950618e-01],
       [6.39637507e-01, 6.48416670e-01, 1.65061386e-02],
    ...01],
       [9.18007313e-01, 4.97123463e-01, 7.21208901e-01],
       [4.06671732e-01, 3.24253909e-01, 5.04748087e-01]])
energies = array([-100.        ,  -98.88888889,  -97.77777778,  -96.66666667,
        -95.55555556,  -94.44444444,  -93.33333333,  -92.22222222,
        -91.11111111,  -90.        ])
ids = [0, 1, 2, 3, 4, 5, ...], method = 'random', parameters = {'fraction': 0.5}

    def filter(self, coordinates, energies, ids, method, parameters):
        if len(coordinates) != len(energies) or len(ids) != len(energies):
            raise ValueError("List length mismatch.")
    
        energies = np.array([float(e) for e in energies])
        sorted_indices = np.argsort(energies)
    
        if method == 'energy_window':
            window = parameters.get('energy', DEFAULT_ENERGY_WINDOW)
            if parameters.get('unit') == 'kcal/mol':
                window /= HARTREE_TO_KCAL_MOL
            min_energy = np.min(energies)
            indices = [i for i in sorted_indices if energies[i] <= min_energy + window]
    
        elif method == 'boltzmann':
            temperature = DEFAULT_TEMPERATURE
            percent = parameters.get('weight', DEFAULT_BOLTZMANN_PERCENTAGE)
            kcal = energies * HARTREE_TO_KCAL_MOL
            delta_E = kcal - np.min(kcal)
            probs = np.exp(-delta_E / (R_KCAL_MOL_K * temperature))
            probs /= np.sum(probs)
            cum_probs = np.cumsum(probs)
            cutoff = percent / 100
            limit = np.searchsorted(cum_probs, cutoff) + 1
            indices = sorted_indices[:limit]
    
        elif method == 'integer':
            n = parameters.get('num_structures', len(coordinates))
            indices = sorted_indices[:min(n, len(coordinates))]
        else:
>           raise ValueError("Unknown filter method.")
E           ValueError: Unknown filter method.

refine.py:35: ValueError
______________________________ test_save_step_csv ______________________________

tmp_path = PosixPath('/tmp/pytest-of-dal950773/pytest-3/test_save_step_csv0')

    def test_save_step_csv(tmp_path):
        """
        Test Utility.save_step_csv() writes CSV with correct structure.
        """
        energies = [-75.0, -74.5, -74.2]
        ids = [0, 1, 2]
        utility = Utility()
        step_number = 1
>       utility.save_step_csv(energies, ids, step_number, output_dir=tmp_path)
E       TypeError: Utility.save_step_csv() got an unexpected keyword argument 'output_dir'

tests/test_utils.py:13: TypeError
=========================== short test summary info ============================
FAILED tests/test_interface.py::test_parse_output_real_data - assert 0 > 0
FAILED tests/test_refine.py::test_filter_structures - ValueError: Unknown fil...
FAILED tests/test_utils.py::test_save_step_csv - TypeError: Utility.save_step...
========================= 3 failed, 3 passed in 4.08s ==========================

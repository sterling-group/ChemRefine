{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#automated-workflow-for-conformer-sampling-and-refinement","title":"Automated Workflow for Conformer Sampling and Refinement.","text":"<p>This repository contains a streamlined Python code for automated ORCA workflow for conformer sampling, TS finding,  and refinement for DFT and MLIPs. The code automates the process of progressively refining the level of theory, eliminating the need for manual intervention. This code seamlessly integrates state-of-the-art MLIP's that can be accessed through ORCA inputs. This code is meant for HPC slurm submission system. Using an input yaml file we are able to automate the process of submitting calculations and then choosing a sampling method to choose the favored conformations, to then refine the calculation with more precise methods.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Automated workflow for conformer sampling and refinement</li> <li>Progressive refinement of computational level across multiple steps</li> <li>Intelligent sampling with multiple selection algorithms (energy window, Boltzmann, integer-based)</li> <li>HPC integration with automatic SLURM job management and resource optimization</li> <li>Built-in analysis with CSV output and structure filtering</li> <li>Flexible configuration via YAML input files</li> <li>Error reduction and efficient resource utilization</li> <li>Machine Learning Interatomic potentials integration using pretrained <code>mace</code> and <code>FairChem models</code> models for fast geometry optimisation, molecular dynamics, and more.</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#development-installation","title":"Development Installation","text":"<pre><code># Clone the repository\ngit clone --recursive https://github.com/sterling-research-group/ChemRefine.git\ncd ChemRefine\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.6+ with the following dependencies:</li> <li><code>numpy</code> - Numerical computations</li> <li><code>pyyaml</code> - YAML configuration parsing  </li> <li><code>pandas</code> - Data analysis and CSV handling</li> <li><code>ase</code> - Geometry handling and optimisation</li> <li><code>mace-torch</code> - Machine learning force fields</li> <li><code>torch == 2.5.1</code> - Machine Learning (if you use later version of Pytorch it might not work with UMA models)</li> <li>ORCA 6.0+ - Quantum chemistry calculations</li> <li>SLURM - Job scheduling system for HPC</li> <li>MACE-torch - MLIP platform for MACE architecture</li> <li>FAIRChem - MLIP platform for UMA and esen models</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-prepare-input-files","title":"1. Prepare Input Files","text":"<p>Create the required input files in your working directory:</p> <ul> <li>YAML Configuration (<code>input.yaml</code>): Defines the workflow steps</li> <li>Initial XYZ (<code>step1.xyz</code>): Starting molecular geometry  </li> <li>ORCA Templates (<code>step1.inp</code>, <code>step2.inp</code>, <code>step3.inp</code>... <code>orca.slurm.header</code>, <code>mlff.slurm.header</code>): Calculation templates for each step</li> </ul> <p>You must provide one ORCA input file (e.g., <code>step1.inp</code>, <code>step2.inp</code>, etc.) for each step defined in your <code>input.yaml</code> configuration file, otherwise you must define a MLFF step. For example, if your <code>input.yaml</code> specifies three ORCA steps, then you need three corresponding ORCA input files in your templates directory.</p> <p>ChemRefine provides seamless MLIP integration through the use of the tool ExtOpt in Orca, which uses the ORCA optimization codes paired with ASE, you can use any optimization function of ORCA with MLIPS. For more information.</p> <p>In addition to these input files, you must include one of each: - <code>cpu.slurm.header</code>: A SLURM submission script header with your cluster-specific job settings (e.g., partition, time limit, memory). - <code>cuda.slurm.header</code>: Required for MLFF jobs. Include your GPU node configuration here so MLFF calculations run under SLURM.</p> <p>Make sure to specify the path to your ORCA 6.0+ executable in the <code>ORCA_EXEC</code> line of your header file(s). Adjust any other parameters (such as modules or memory) to fit your cluster environment.</p>"},{"location":"#2-run-the-workflow","title":"2. Run the Workflow","text":"<pre><code># Basic usage\nchemrefine input.yaml\n\n# With custom core count\nchemrefine input.yaml --maxcores 128\n\n# Background execution (recommended for HPC)\nnohup chemrefine input.yaml --maxcores 128 &amp;\n\n# Skip any step (if already completed)\nchemrefine input.yaml --skip\n</code></pre>"},{"location":"#3-monitor-progress","title":"3. Monitor Progress","text":"<p>The tool provides detailed logging and creates organized output directories for each step:</p> <pre><code>step1/          # Conformer generation outputs\nstep2/          # First refinement level outputs  \nstep3/          # Final high-level calculations\nsteps.csv       # Summary of energies and structures\n</code></pre>"},{"location":"#input-files-description","title":"Input Files Description","text":""},{"location":"#yaml-configuration-file","title":"YAML Configuration File","text":"<pre><code>template_dir: &lt;location of template_files&gt;\nscratch_dir:  &lt;location of your scratch directory&gt;\noutput_dir: &lt;location of your output directory&gt;\norca_executable: &lt;location of your ORCA executable&gt; \ncharge: 0\nmultiplicity: 1\nsteps:\n  - step: 1\n    calculation_type: \"GOAT\"\n    sampling:\n      method: \"integer\"\n      parameters:\n        count: 10\n  - step: 2\n    calculation_type: \"DFT\"\n    charge: -1                  # &lt;--- Step-specific override\n    multiplicity: 2            # &lt;--- Step-specific override\n    sampling:\n      method: \"energy_window\"\n      parameters:\n        window: 0.5\n  - step: 3\n    calculation_type: \"MLFF\"\n    mlff:\n      model_name: \"medium\"  # For MACE: small,medium,large for FAIRCHEM \"uma-s-1\"\n      task_type: \"mace_off\" # For MACE: \"mace_off\" or \"mace_mp\", for FairChem: oc20, omat, omol, odac, omc\n      bind: '127.0.0.1:8888'    # ChemRefine uses a local server to avoid initializing the model multiple times, only adjust this if you know what you're doing.\n    sampling:\n      method: \"integer\"\n      parameters:\n        num_structures: 1\n</code></pre> <p>The optional MLFF step uses a pretrained model from <code>mace</code> or <code>FairChem</code>. By default the <code>mace-off</code> backend with the <code>\"medium\"</code> model is used, but you can select different backends and models via <code>model_name</code> and <code>task_type</code>. With task_type you can select on what training data the model was trained on.  If a CUDA-capable GPU is detected, the MLFF optimisation runs on the GPU; otherwise it falls back to the CPU automatically.</p>"},{"location":"#orca-template-files","title":"ORCA Template Files","text":"<ol> <li>First Input File (<code>step1.inp</code>):</li> <li>Generally includes GOAT specifications for conformer optimization or another conformer sampler. </li> <li>Uses cheap level of theory (e.g., XTB) for initial sampling</li> <li> <p>Example: <code>! GOAT XTB</code></p> </li> <li> <p>Subsequent Input Files (<code>step2.inp</code>, <code>step3.inp</code>, etc.):</p> </li> <li>Progressive refinement with higher-level methods</li> <li>Recommended: Include frequency calculations in final step</li> <li> <p>Example: <code>! B3LYP def2-TZVP FREQ</code></p> </li> <li> <p>Initial XYZ File (<code>step1.xyz</code>):</p> </li> <li>Starting molecular geometry</li> <li>Standard XYZ format with atom count, comment line, and coordinates</li> </ol>"},{"location":"#sampling-methods","title":"Sampling Methods","text":""},{"location":"#energy-window","title":"Energy Window","text":"<pre><code>method: \"energy_window\"\nparameters:\n  window: 0.5  # Hartrees\n</code></pre> <p>Selects conformers within specified energy range of the global minimum.</p>"},{"location":"#boltzmann-population","title":"Boltzmann Population","text":"<pre><code>method: \"boltzmann\"\nparameters:\n  percentage: 95  # Cumulative population %\n  temperature: 298.15  # Kelvin\n</code></pre> <p>Selects conformers based on Boltzmann population at given temperature.</p>"},{"location":"#integer-count","title":"Integer Count","text":"<pre><code>method: \"integer\" \nparameters:\n  count: 10  # Number of conformers\n</code></pre> <p>Selects the N lowest-energy conformers.</p>"},{"location":"#example-multi-step-workflows","title":"** Example Multi-Step Workflows**","text":"<p>The tool supports complex multi-step refinement protocols: 1. Step 1: GOAT or other conformer generation (XTB level) 2. Step 2: Machine Learning interatomic potential optimization (uma-s-1/omol) 2. Step 3: DFT geometry optimization (B3LYP/def2-SVP) 3. Step 4: High-level single points (B3LYP/def2-TZVP + frequencies)</p>"},{"location":"#resource-management","title":"Resource Management","text":"<ul> <li>Automatic core allocation based on ORCA PAL settings</li> <li>Intelligent job queuing to maximize cluster utilization</li> <li>Real-time monitoring of SLURM job status</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>auto-conformer-goat/\n\u251c\u2500\u2500 src/chemrefine          # Main package code\n\u251c\u2500\u2500 Examples/               # Example input files and SLURM scripts\n\u251c\u2500\u2500 docs                    # Files for the ChemRefine page\n\u251c\u2500\u2500 README.md               # This file\n\u251c\u2500\u2500 LICENSE                 # License\n\u2514\u2500\u2500 pyproject.toml          # Package configuration\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please: 1. Fork the repository 2. Create a feature branch 3. Add tests for new functionality 4. Submit a pull request</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use Auto-Conformer-GOAT in your research, please cite:</p> <pre><code>@software{ChemRefine,\n  title={ChemRefine},\n  author={Sterling Research Group},\n  url={https://github.com/sterling-research-group/ChemRefine},\n  year={2025}\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GNU General Public License v3.0 - see the LICENSE file for details.</p>"},{"location":"#support","title":"Support","text":"<p>For questions, issues, or feature requests: - \ud83d\udce7 Email: ignacio.migliaro@utdallas.edu - \ud83d\udc1b Issues: GitHub Issues - \ud83d\udcd6 Documentation: README.md</p>"},{"location":"INSTALL/","title":"Installation and Setup Guide","text":""},{"location":"INSTALL/#package-installation","title":"Package Installation","text":""},{"location":"INSTALL/#installation-recommended","title":"Installation (Recommended)","text":"<pre><code>git clone --recursive https://github.com/sterling-research-group/ChemRefine.git\ncd ChemRefine\n\n# Install in development mode\npip install -e .\n\n# Verify installation\nchemrefine --help\n\n# Clone repository\ngit clone https://github.com/sterling-research-group/ChemRefine.git\ncd ChemRefine\n\n# Install package6\npip install .\n</code></pre>"},{"location":"INSTALL/#install-package","title":"Install package","text":"<p>pip install .</p>"},{"location":"INSTALL/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.6+ with the following dependencies:</li> <li><code>numpy</code> - Numerical computations</li> <li><code>pyyaml</code> - YAML configuration parsing  </li> <li><code>pandas</code> - Data analysis and CSV handling</li> <li><code>ase</code> - Geometry handling and optimisation</li> <li><code>mace-torch</code> - Machine learning force fields</li> <li><code>torch == 2.5.1</code> - Machine Learning (if you use later version of Pytorch it might not work with UMA models)</li> </ul>"},{"location":"INSTALL/#external-requirements","title":"External Requirements","text":"<ul> <li>ORCA 6.0+ - Quantum chemistry calculations</li> <li>SLURM - Job scheduling system for HPC</li> <li>MACE-torch - MLIP platform for MACE architecture</li> <li>FAIRChem - MLIP platform for UMA and esen models</li> </ul>"},{"location":"INSTALL/#verification","title":"Verification","text":"<p>After installation, verify everything works:</p> <pre><code># Test command-line interface\nchemrefine --help\n\n# Test with example files\ncd Examples/\nchemrefine input.yaml --maxcores 32\n</code></pre>"},{"location":"INSTALL/#development-setup","title":"Development Setup","text":"<p>For developers who want to contribute:</p> <pre><code># Install with development dependencies\npip install -e \".\"\n\n# Run tests\npytest\n</code></pre>"},{"location":"INSTALL/#license-information","title":"License Information","text":"<p>This software is licensed under the GNU General Public License v3.0. By installing and using this software, you agree to the terms of the GPL-3.0 license. See the LICENSE file for complete terms.</p>"},{"location":"INSTALL/#troubleshooting","title":"Troubleshooting","text":""},{"location":"INSTALL/#common-issues","title":"Common Issues","text":"<ol> <li>QORCA not found: Ensure submodules are initialized</li> <li>ORCA not accessible: Check ORCA installation and PATH</li> <li>SLURM errors: Verify SLURM configuration for your cluster</li> <li>Permission errors: Check file permissions in working directory</li> </ol>"},{"location":"INSTALL/#getting-help","title":"Getting Help","text":"<ul> <li>Check the main README.md for usage examples</li> <li>Review Examples/ directory for sample inputs</li> <li>Open an issue on GitHub for bugs or feature requests</li> </ul>"},{"location":"tutorial/","title":"Tutorials Overview","text":"<p>This section contains full examples of ChemRefine workflows:</p> <ul> <li>Conformer Sampling</li> <li>Transition State Finding</li> <li>MLIP Training and Normal Mode Sampling</li> <li>Oxidation</li> <li>Host-Guest Docking and Microsolvation</li> <li>Spin</li> </ul>"},{"location":"tutorial/conformer_sampling/","title":"Conformer Sampling Tutorial","text":"<p>This tutorial demonstrates how to use ChemRefine for conformational sampling with an initial global geometry optimization (GOAT) and ensemble generation.</p>"},{"location":"tutorial/conformer_sampling/#overview","title":"Overview","text":"<p>Conformer sampling is the first step in exploring molecular flexibility and generating diverse geometries. ChemRefine automates this process by running a global optimization followed by ensemble generation, producing a set of candidate structures for further refinement.</p> <p>The workflow:</p> <ol> <li>Global Optimization (GOAT):    Performs a stochastic search of the potential energy surface (PES) to identify low-energy conformers.  </li> <li>Ensemble Generation:    Collects the lowest-energy structures into an ensemble for downstream calculations (e.g., DFT, MLFF).</li> <li>Level of theory benchmarking:     We're going to refine the level of theory starting from simple GFN2-xTB, UMA-S-1, PBE-D4, \u03c9B97X-D4, B2PLYP </li> </ol>"},{"location":"tutorial/conformer_sampling/#prerequisites","title":"Prerequisites","text":"<ul> <li>Installed ChemRefine (see Installation Guide)  </li> <li>Access to an ORCA executable </li> <li>Example molecule and YAML input from the repository  </li> </ul>"},{"location":"tutorial/conformer_sampling/#input-files","title":"Input Files","text":"<p>For this tutorial, we will use Pd(PPh\u2083)\u2084.</p> <ul> <li>\ud83d\udcc4 View step1.xyz </li> <li>\ud83d\udce5 Download step1.xyz</li> </ul>"},{"location":"tutorial/conformer_sampling/#interactive-3d-viewer","title":"Interactive 3D Viewer","text":""},{"location":"tutorial/conformer_sampling/#yaml-configuration","title":"YAML Configuration","text":"<p>The YAML input for conformer sampling is also included in the tutorial folder:</p> <p>\u27a1\ufe0f Examples/Tutorials/Conformational Sampling/input.yaml</p> <p>Example content:</p> <pre><code>charge: 0\nmultiplicity: 1\n\ninitial_xyz: ./Examples/Tutorials/Conformational Sampling/PdPPh3_4.xyz\n\ntemplate_dir: ./templates\nscratch_dir: /scratch/\noutput_dir: ./outputs\norca_executable: /orca\n# Sequential ORCA Input Configuration File\n# Define each step with its specific parameters.\n#This workflow reflects using GOAT and refining methods to improve the accuracy\ncharge: 0\nmultiplicity: 1 \n\n# Optional: Override default initial structure (default is /template_dir/step1.xyz)\ninitial_xyz: ./templates/step1.xyz\n\nsteps:\n  - step: 1\n    calculation_type: \"GOAT\"\n    sample_type:\n      method: \"integer\"  \n      parameters:\n       num_structures: 15  #This energy is in Hartrees.\n\n  # Step 1: Using MLFF to refine the calculation\n  - step: 2\n    calculation_type: \"MLFF\"\n    mlff:\n      model_name: \"uma-s-1\"\n      task_name: \"omol\"\n      device: \"cuda\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n       num_structures: 15 \n\n  - step: 3\n    calculation_type: \"DFT\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n        num_strucures: 15      \n\n  - step: 4\n    calculation_type: \"DFT\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n        num_strucures: 15\n\n  - step: 5\n    calculation_type: \"DFT\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n        num_structures: 15\n</code></pre>"},{"location":"tutorial/conformer_sampling/#how-to-run","title":"How to Run","text":"<p>Before running ChemRefine, ensure that:</p> <ul> <li>The ChemRefine Enviroment is activated</li> <li>The ORCA executable is installed and available in your <code>PATH</code> </li> <li>The template directory (<code>./templates/</code>) is correctly set up  </li> <li>The input structure file (e.g., <code>input.xyz</code>) is prepared  </li> </ul>"},{"location":"tutorial/conformer_sampling/#option-1-run-from-the-command-line","title":"Option 1: Run from the Command Line","text":"<p>You can launch ChemRefine directly from the command line:</p> <pre><code>chemrefine input.yaml --maxcores &lt;N&gt;\n</code></pre> <p>Here N is the max number of simultaneous cores you want to use.</p>"},{"location":"tutorial/conformer_sampling/#option-2-run-chemrefine-with-slurm-script","title":"Option 2: Run ChemRefine with SLURM script","text":"<p>On HPC systems with SLURM, you can submit ChemRefine as a batch job. A ready-to-use SLURM script template is available at:</p> <p>\u27a1\ufe0fExample ChemRefine SLURM script</p> <pre><code>#!/bin/bash\n#SBATCH --partition=&lt;your_partition&gt;\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=1\n#SBATCH --mem=2G              # Limit memory to allow multiple jobs on the same node\n#SBATCH --time=72:00:00\n#SBATCH --exclude=g-07-02\n#SBATCH --job-name=conformer_search\n#SBATCH --output=%x.out   # Saves output to auto_goat_JOBID.out\n#SBATCH --error=%x.err    # Saves error log\n\n# Ensure the script allows for shared node usage\nexport OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK\n\n# Run the calculation\nchemrefine input.yaml --maxcores 480 \n</code></pre>"},{"location":"tutorial/mlip_training/","title":"MLIP Training Tutorial","text":"<p>This tutorial demonstrates how to use ChemRefine to train a Machine Learning Interatomic Potential (MLIP) using DFT data generated during the workflow.</p>"},{"location":"tutorial/mlip_training/#overview","title":"Overview","text":"<p>Training an MLIP involves generating reference data, running the training process, and validating the trained model on new configurations. ChemRefine automates this multi-step process:</p> <ol> <li> <p>Global Optimization (GOAT)    Performs a stochastic search of the PES to identify low-energy conformers.  </p> </li> <li> <p>Normal Mode Sampling (NMS)    Generates additional diverse geometries by displacing atoms along vibrational modes.  </p> </li> <li> <p>Reference DFT Optimizations (OPT+SP)    Provides high-quality energies and forces for MLIP training.  </p> </li> <li> <p>MLIP Training (MLFF_TRAIN)    Trains a potential (e.g., MACE) on the generated DFT dataset.  </p> </li> <li> <p>MLIP Validation (OPT+SP with MLFF)    Applies the trained model to evaluate new structures, testing its accuracy and efficiency.  </p> </li> </ol>"},{"location":"tutorial/mlip_training/#prerequisites","title":"Prerequisites","text":"<ul> <li>Installed ChemRefine (see Installation Guide)  </li> <li>Access to an ORCA executable (for DFT reference calculations)  </li> <li>Example molecule and YAML input from the repository  </li> </ul>"},{"location":"tutorial/mlip_training/#input-files","title":"Input Files","text":"<p>We start with an initial structure located in the templates folder:</p> <ul> <li>\ud83d\udcc4 View step1.xyz </li> <li>\ud83d\udce5 Download step1.xyz</li> </ul>"},{"location":"tutorial/mlip_training/#interactive-3d-viewer","title":"Interactive 3D Viewer","text":""},{"location":"tutorial/mlip_training/#yaml-configuration","title":"YAML Configuration","text":"<p>The full YAML input for this MLIP training workflow is included:</p> <p>\u27a1\ufe0f Examples/Tutorials/MLIP-Training/input.yaml</p> <p>Example content:</p> <pre><code>orca_executable: /mfs/io/groups/sterling/software-tools/orca/orca_6_1_0_avx2/orca\ncharge: 0\nmultiplicity: 1\n\ninitial_xyz: ./templates/step1.xyz\n\nsteps:\n  - step: 1\n    operation: \"GOAT\"\n    engine: \"DFT\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n       num_structures: 15\n\n  - step: 2\n    operation: \"OPT+SP\"\n    engine: \"DFT\"\n    normal_mode_sampling: True\n    normal_mode_sampling_parameters:\n      calc_type: \"random\"\n      displacement_vector: 1.0\n      num_random_displacements: 1\n    sample_type:\n      method: \"integer\"\n      parameters:\n       num_structures: 0\n\n  - step: 3\n    operation: \"OPT+SP\"\n    engine: \"DFT\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n        num_structures: 0\n\n  - step: 4\n    operation: \"MLFF_TRAIN\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n        num_structures: 0\n\n  - step: 5\n    operation: \"OPT+SP\"\n    engine: \"MLFF\"\n    mlff:\n      model_name: \"../step3/checkpoints_dir/goat_model_run-123_stagetwo.model\"\n      task_name: \"mace_off\"\n      device: \"cuda\"\n    sample_type:\n      method: \"integer\"\n      parameters:\n       num_structures: 0\n</code></pre>"},{"location":"tutorial/mlip_training/#how-to-run","title":"How to Run","text":"<p>Before running ChemRefine, ensure that:</p> <ul> <li>The ChemRefine environment is activated  </li> <li>The ORCA executable path is correct  </li> <li>The template directory (<code>./templates/</code>) contains the initial structure  </li> <li>The YAML config matches your dataset and workflow  </li> </ul>"},{"location":"tutorial/mlip_training/#option-1-run-from-the-command-line","title":"Option 1: Run from the Command Line","text":"<pre><code>chemrefine input.yaml --maxcores &lt;N&gt;\n</code></pre> <p>Here N is the number of simultaneous cores you want to use.</p>"},{"location":"tutorial/mlip_training/#option-2-run-with-slurm-script","title":"Option 2: Run with SLURM Script","text":"<p>On HPC systems with SLURM, submit the training workflow as a batch script:</p> <p>\u27a1\ufe0f Example ChemRefine SLURM script</p> <pre><code>#!/bin/bash\n#SBATCH --partition=gpu\n#SBATCH --gres=gpu:1\n#SBATCH --cpus-per-task=8\n#SBATCH --mem=32G\n#SBATCH --time=72:00:00\n#SBATCH --job-name=mlip_training\n#SBATCH --output=%x.out\n#SBATCH --error=%x.err\n\nexport OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK\n\nchemrefine input.yaml --maxcores 8\n</code></pre>"}]}